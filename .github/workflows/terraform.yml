name: Terraform + Frontend Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'bootstrap/**'
      - 'frontend/**'
      - '.github/workflows/terraform.yml'

permissions:
  id-token: write
  pages: write
  actions: read
  contents: read
  pull-requests: write


jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./bootstrap

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.4

      - name: Pre-Import AWS Resources (if already exist)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          set +e

          terraform init -backend=false

          aws dynamodb describe-table --table-name lambda_db_table >/dev/null 2>&1
          if [ $? -eq 0 ]; then
            terraform import aws_dynamodb_table.lambda_db_table lambda_db_table || true
          fi

          aws iam get-role --role-name lambda_exec_role >/dev/null 2>&1
          if [ $? -eq 0 ]; then
            terraform import aws_iam_role.lambda_iam_role lambda_exec_role || true
          fi

          POLICY_ARN=$(aws iam list-policies --scope Local --query "Policies[?PolicyName=='lambda_exec_policy'].Arn" --output text)
          if [ -n "$POLICY_ARN" ]; then
            terraform import aws_iam_policy.lambda_iam_policy "$POLICY_ARN" || true
          fi

          aws lambda get-function --function-name API-app >/dev/null 2>&1
          if [ $? -eq 0 ]; then
            terraform import aws_lambda_function.API-app API-app || true
          fi

          REST_API_ID=$(aws apigateway get-rest-apis --query "items[?name=='login-app-api'].id" --output text)
          if [ -n "$REST_API_ID" ]; then
            terraform import aws_api_gateway_rest_api.login_app_api "$REST_API_ID" || true
          fi

          # Import Lambda Permission (if it exists)
          PERM_EXISTS=$(aws lambda get-policy --function-name API-app --query "Policy" --output text 2>/dev/null || true)
            if [[ "$PERM_EXISTS" != "None" && -n "$PERM_EXISTS" ]]; then
              terraform import aws_lambda_permission.allow_api_gateway API-app/AllowExecutionFromAPIGateway || true
            fi


          set -e

      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Validate
        run: terraform validate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Plan
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Terraform Apply
        continue-on-error: true
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  frontend:
    name: Deploy Frontend to GitHub Pages
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: Replace API URL in HTML
        run: |
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='login-app-api'].id" --output text --region us-east-1)
          API_URL="https://${API_ID}.execute-api.us-east-1.amazonaws.com/dev/login"
          echo "Replacing placeholder with real API URL: $API_URL"
          sed -i "s|https://SEU_API_GATEWAY_URL/dev/login|$API_URL|g" ./frontend/index.html
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload static site
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./frontend

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
